---
- name: Setup Nginx, Gunicorn, and Flask on Ubuntu
  become: true

  vars:
    domain_name: "your_domain_or_IP"
    project_dir: "/home/ubuntu/dj_project"
    gunicorn_sock: "{{ project_dir }}/gunicorn.sock"
    flask_app_file: "{{ project_dir }}/app.py"
    gunicorn_service_file: "/etc/systemd/system/gunicorn.service"
    nginx_conf_file: "/etc/nginx/sites-available/dj_project"
    nginx_enabled_file: "/etc/nginx/sites-enabled/dj_project"

  tasks:

  - name: Update and upgrade apt packages
    apt:
      update_cache: yes
      upgrade: dist

  - name: Install required packages
    apt:
      name: 
        - nginx
        - python3
        - python3-venv
        - python3-pip
        - certbot
        - python3-certbot-nginx
      state: present

  - name: Create project directory
    file:
      path: "{{ project_dir }}"
      state: directory
      owner: ubuntu
      group: ubuntu
      mode: '0755'

  - name: Set up Python virtual environment
    command: python3 -m venv env
    args:
      chdir: "{{ project_dir }}"
    become_user: ubuntu

  - name: Install Flask and Gunicorn
    pip:
      name:
        - Flask
        - gunicorn
      virtualenv: "{{ project_dir }}/env"
    become_user: ubuntu

  - name: Create Flask application
    copy:
      dest: "{{ flask_app_file }}"
      content: |
        from flask import Flask, request, jsonify
        import librosa
        import numpy as np

        app = Flask(__name__)

        @app.route('/')
        def index():
            return "<h1>Hello, World!</h1>"

        def analyze_track(track_path):
            y, sr = librosa.load(track_path)
            tempo, beats = librosa.beat.beat_track(y=y, sr=sr)
            onset_env = librosa.onset.onset_strength(y=y, sr=sr)
            times = librosa.times_like(onset_env, sr=sr)
            onset_frames = librosa.onset.onset_detect(onset_envelope=onset_env, sr=sr)
            onset_times = librosa.frames_to_time(onset_frames, sr=sr)
            return {
                "tempo": tempo,
                "beats": beats.tolist(),
                "onset_times": onset_times.tolist()
            }

        @app.route('/analyze', methods=['POST'])
        def analyze():
            data = request.json
            track_path = data['track_path']
            result = analyze_track(track_path)
            return jsonify(result)

        if __name__ == '__main__':
            app.run(debug=True)

  - name: Create Gunicorn systemd service file
    copy:
      dest: "{{ gunicorn_service_file }}"
      content: |
        [Unit]
        Description=gunicorn daemon
        After=network.target

        [Service]
        User=ubuntu
        Group=www-data
        WorkingDirectory={{ project_dir }}
        ExecStart={{ project_dir }}/env/bin/gunicorn --workers 3 --bind unix:{{ gunicorn_sock }} -m 007 app:app

        [Install]
        WantedBy=multi-user.target

  - name: Reload systemd
    systemd:
      daemon_reload: yes

  - name: Start and enable Gunicorn service
    systemd:
      name: gunicorn
      state: started
      enabled: yes

  - name: Create Nginx configuration file
    copy:
      dest: "{{ nginx_conf_file }}"
      content: |
        server {
            listen 80;
            server_name {{ domain_name }};

            location / {
                proxy_pass http://unix:{{ gunicorn_sock }};
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }

  - name: Enable Nginx configuration
    file:
      src: "{{ nginx_conf_file }}"
      dest: "{{ nginx_enabled_file }}"
      state: link

  - name: Test Nginx configuration
    command: nginx -t

  - name: Restart Nginx
    systemd:
      name: nginx
      state: restarted

  - name: Obtain Let's Encrypt SSL certificate
    command: certbot --nginx -d {{ domain_name }}
    args:
      creates: /etc/letsencrypt/live/{{ domain_name }}/fullchain.pem

  - name: Ensure firewall is enabled and configured
    ufw:
      rule: allow
      port: '80,443'
      proto: tcp

